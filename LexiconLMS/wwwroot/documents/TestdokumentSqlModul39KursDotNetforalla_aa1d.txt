SQL:
****************************
Select column, column1, .....
From mytable;

Select *
From mytable

Where clause is applied to each row of data by checking specific column values.

Select column, column1, ....
From mytable
Where condition
	And/Or another_condition
	And/Or....;

ex.: num_wheels >= 4 AND doors <= 2

=, !=, <, <=, >, >=: Standard numerical operatos
BETWEEN....AND: Number is within range of two values
NOT BETWEEN.....AND: Number is not within range of two values
IN (....): Number exists in a list
NOT IN (...): Number does not exist in a list

Operator	Condition				Example
=		Case sensitive exact string comparison 
		(notice the single equals)		col_name = "abc"

!= or <>	Case sensitive exact string inequality 
		comparison				col_name != "abcd"

LIKE		Case insensitive exact string 
		comparison				col_name LIKE "ABC"

NOT LIKE	Case insensitive exact string 
		inequality comparison			col_name NOT LIKE "ABCD"

%		Used anywhere in a string to match a
		sequence of zero or more characters
		 (only with LIKE or NOT LIKE)		col_name LIKE "%AT%"
							(matches "AT", "ATTIC", 
							"CAT" or even "BATS")

_		Used anywhere in a string to match a 
		single character (only with LIKE or
		NOT LIKE)				col_name LIKE "AN_"
							(matches "AND", but not "AN")

IN (…)		String exists in a list			col_name IN ("A", "B", "C")

NOT IN (…)	String does not exist in a list		col_name NOT IN ("D", "E", "F")

DISTINCT: Väljer bara ett av duplicerade värden i databasen.
SELECT DISTINCT column, another_column, …
FROM mytable
WHERE condition(s);
Kan grupperas med GROUP BY clause.

ORDER BY:
SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC;

Limiting results to a subset:
Another clause which is commonly used with the ORDER BY clause are the LIMIT and OFFSET.
The LIMIT will reduce the number of rows to return, and the optional OFFSET will specify
where to begin counting the number rows from.

SELECT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;


Multi-table queries with JOINs:
*******************************
INNER JOINs:
- Select query with INNER JOIN on multiple tables: (JOIN and INNER JOIN are equivalent)
SELECT column, another_table_column, …
FROM mytable
INNER JOIN another_table 
    ON mytable.id = another_table.id //they have the same key
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;
	The INNER JOIN is a process that matches rows from the first table and the second 
	table which have the same key (as defined by the ON constraint) to create a result 
	row with the combined columns from both tables.

OUTER JOINs:

If the two tables have asymmetric data, which can easily happen when data is entered in 
different stages, then we would have to use a LEFT JOIN, RIGHT JOIN or FULL JOIN instead 
to ensure that the data you need is not left out of the results.

- Select query with LEFT/RIGHT/FULL JOINs on multiple tables
SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;

- Like the INNER JOIN these three new joins have to specify which column to join the data on.
- When joining table A to table B, a LEFT JOIN simply includes rows from A regardless of 
whether a matching row is found in B. The RIGHT JOIN is the same, but reversed, keeping 
rows in B regardless of whether a match is found in A. Finally, a FULL JOIN simply means 
that rows from both tables are kept, regardless of whether a matching row exists in 
the other table.
- When using any of these new joins, you will likely have to write additional logic to deal 
with NULLs in the result and constraints

OUTER word is optional (ex LEFT OUTER JOIN) other than for SQL-)" compatability.

NULL values:
- Select query with constraints on NULL values
SELECT column, another_column, …
FROM mytable
WHERE column IS/IS NOT NULL
AND/OR another_condition
AND/OR …;

Queries with expressions:
***************************
- Example query with expressions
SELECT particle_speed / 2.0 AS half_particle_speed
FROM physics_data
WHERE ABS(particle_position) * 10.0 > 500;

Aliasies:
- Example query with both column and table name aliases
SELECT column AS better_column_name, …
FROM a_long_widgets_table_name AS mywidgets
INNER JOIN widget_sales
  ON mywidgets.id = widget_sales.widget_id;


Queries with aggregates (Pt. 1):
**********************************
- Select query with aggregate functions over all rows
SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression;

Without a specified grouping, each aggregate function is going to run on 
the whole set of result rows and return a single value. And like normal 
expressions, giving your aggregate functions an alias ensures that the 
results will be easier to read and process.

Common aggregate functions:
Function		Description
COUNT(*), COUNT(column)	A common function used to count the number of rows in the 
			group if no column name is specified. Otherwise, count the 
			number of rows in the group with non-NULL values in the 
			specified column.
MIN(column)		Finds the smallest numerical value in the specified column 
			for all rows in the group.
MAX(column)		Finds the largest numerical value in the specified column 
			for all rows in the group.
AVG(column)		Finds the average numerical value in the specified column 
			for all rows in the group.
SUM(column)		Finds the sum of all numerical values in the specified column 
			for the rows in the group.

Grouped aggregate functions:
- In addition to aggregating across all the rows, you can instead apply the aggregate 
functions to individual groups of data within that group (ie. box office sales for 
Comedies vs Action movies). This would then create as many results as there are unique 
groups defined as by the GROUP BY clause.

- Select query with aggregate functions over groups
SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression
GROUP BY column;
- The GROUP BY clause works by grouping rows that have the same value in the column specified. 

Queries with aggregates (Pt. 2):
***********************************
- How exactly do we filter grouped rows? 
QL allows us to do this by adding an additional HAVING clause which is used specifically 
with the GROUP BY clause to allow us to filter grouped rows from the result set.

- Select query with HAVING constraint
SELECT group_by_column, AGG_FUNC(column_expression) AS aggregate_result_alias, …
FROM mytable
WHERE condition
GROUP BY column
HAVING group_condition;
- The HAVING clause constraints are written the same way as the WHERE clause constraints, 
and are applied to the grouped rows.

Order of execution of a Query:
*******************************
- Complete SELECT query
SELECT DISTINCT column, AGG_FUNC(column_or_expression), …
FROM mytable
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE constraint_expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;

Each query begins with finding the data that we need in a database, and then filtering 
that data down into something that can be processed and understood as quickly as possible. 
Because each part of the query is executed sequentially, it's important to understand 
the order of execution so that you know what results are accessible where.

Query order of execution:
********************************
1. FROM and JOINs
The FROM clause, and subsequent JOINs are first executed to determine the total working set of data that is being queried. This includes subqueries in this clause, and can cause temporary tables to be created under the hood containing all the columns and rows of the tables being joined.

2. WHERE
Once we have the total working set of data, the first-pass WHERE constraints are applied to the individual rows, and rows that do not satisfy the constraint are discarded. Each of the constraints can only access columns directly from the tables requested in the FROM clause. Aliases in the SELECT part of the query are not accessible in most databases since they may include expressions dependent on parts of the query that have not yet executed.

3. GROUP BY
The remaining rows after the WHERE constraints are applied are then grouped based on common values in the column specified in the GROUP BY clause. As a result of the grouping, there will only be as many rows as there are unique values in that column. Implicitly, this means that you should only need to use this when you have aggregate functions in your query.

4. HAVING
If the query has a GROUP BY clause, then the constraints in the HAVING clause are then applied to the grouped rows, discard the grouped rows that don't satisfy the constraint. Like the WHERE clause, aliases are also not accessible from this step in most databases.

5. SELECT
Any expressions in the SELECT part of the query are finally computed.

6. DISTINCT
Of the remaining rows, rows with duplicate values in the column marked as DISTINCT will be discarded.

7. ORDER BY
If an order is specified by the ORDER BY clause, the rows are then sorted by the specified data in either ascending or descending order. Since all the expressions in the SELECT part of the query have been computed, you can reference aliases in this clause.

8. LIMIT / OFFSET
Finally, the rows that fall outside the range specified by the LIMIT and OFFSET are discarded, leaving the final set of rows to be returned from the query.

Conclusion:
---------------------
Not every query needs to have all the parts we listed above, but a part of why SQL is so flexible is that it allows developers and data analysts to quickly manipulate data without having to write additional code, all just by using the above clauses.
***********************************************

